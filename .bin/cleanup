#!/usr/bin/env python

import os
import shutil
from datetime import datetime, timedelta
import argparse
import sys
import logging
import time


logger = logging.getLogger(__name__)

__TESTING__ = True
__default_log_name = f'{os.path.basename(__file__).split(".")[0]}.log'
__default_log_dir = r'/Users/thughes/Desktop/tmp'
__default_use_case = 'default'

def is_valid_directory(to_check, descr):
    if not to_check:
        logging.error(f'{descr} is invalid')
        return False
    if not os.path.exists(to_check):
        logging.error(f'{descr} does not exist')
        return False
    if not os.path.isdir(to_check):
        logging.error(f'{descr} is not a dir')
        return False
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Cleanup old files to trash or staging directory")
    parser.add_argument("target", help="target cleanup dir")
    parser.add_argument("days", type=int, help="number of days young to survive")
    parser.add_argument("--stage", type=str, default="", help="(optional) Staging dir if set, else purge")
    parser.add_argument("--log-dir", type=str,
                        default=__default_log_dir, help="(optional) directory to drop logs in")
    parser.add_argument("--use-case", type=str,
                        default=__default_use_case, help="(optional) descriptor for action")
    parser.add_argument('--log-format',
                        default='%(asctime)s [%(levelname)s]: %(message)s',
                        help='Log message format')
    parser.add_argument('--log-level', default='INFO',
                        help='Set the logging level')

    args = parser.parse_args()
    log_file = os.path.join(args.log_dir, f'{args.use_case}-{__default_log_name}')

    logging.basicConfig(filename=log_file, level=args.log_level, format=args.log_format)

    is_purge = len(args.stage) == 0
    logging.info(f'Configuration: Target [{args.target}] of age [{args.days}] days, with stage [{args.stage}]')

    assert is_valid_directory(args.target, 'Target')
    assert is_purge or is_valid_directory(args.target, 'Staging')
    assert args.days >=0, f'Must have greater than 0 days of age. Have [{args.days}] instead.'

    _target = args.target
    if os.path.islink(_target):
        _target = os.readlink(_target)
        logging.info(f'Target {args.target} is a link to [{_target}]. Using link file.')

    file_delta = datetime.now() - timedelta(days=args.days)
    ## Dir Cutoff is longer because it could have more info
    folder_delta = datetime.now() - timedelta(days=(2* args.days))
    testing_delta = datetime.now() - timedelta(seconds=10)
    # if __TESTING__: time.sleep(10)


    for file_path in [os.path.join(_target, p) for p in os.listdir(_target)]:

        mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
        is_file = os.path.isfile(file_path)
        logging_name = f'{file_path}{"/*" if not is_file else ""}'
        cutoff_time = file_delta if is_file else folder_delta
        cutoff_time = testing_delta if __TESTING__ else cutoff_time
        logging.info(f'File {file_path}. Mod [{mod_time}] Cutoff [{cutoff_time}]')

        if mod_time < cutoff_time:
            try:
                if is_purge:
                    # shutil.rmtree(file_path)
                    logging.info(f"Purged {logging_name}")
                else:
                    staged_file_path = os.path.join(args.stage, os.path.basename(file_path))
                    # shutil.move(file_path, staged_file_path)
                    logging.info(f"Staged {logging_name} to {staged_file_path}")
            except Exception as e:
                logging.error(f"Failed Cleaning Up {logging_name}--{e}")