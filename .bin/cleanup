#!/usr/bin/env python

import os
import shutil
from datetime import datetime, timedelta
import argparse
import sys

__LOGGING__ = True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Cleanup old files to trash or staging directory")
    parser.add_argument("target", help="target cleanup dir")
    parser.add_argument("days", type=int, help="number of days young to survive")
    parser.add_argument("--stage", type=str, default="", help="(optional) Staging dir if set, else purge")

    args = parser.parse_args()

    tail_name = os.path.split(f"{__file__.split('.')[0]}.log")[1]
    log_name = os.path.join(os.getenv('_LOG_DIR_', os.getenv('HOME')), tail_name) 

    if __LOGGING__: print(f'Log File: {log_name}')
    
    with open(log_name, 'w') as log:
        sys.stdout = log
        sys.stderr = log
        def log_info(*args, **kwargs): 
            sys.stdout.write("INFO:")
            sys.stdout.write(*args, **kwargs)
            sys.stdout.write('\n')
        def log_error(*args, **kwargs):
            sys.stdout.write("ERROR:")
            sys.stdout.write(*args, **kwargs)
            sys.stdout.write('\n') 


        is_purge = len(args.stage) == 0
        paths_to_check = [args.target] if is_purge else [args.target, args.stage]

        for check_path in paths_to_check: 
            if not os.path.exists(check_path) or not os.path.isdir(check_path): 
                log_error(f'path {args.target} is not a directory')
                sys.exit()

        if args.days <= 0: 
            log_error(f'Num Days should be greater than 0')
            sys.exit()

        file_delta = datetime.now() - timedelta(days=args.days)
        ## Dir Cutoff is longer because it could have more info
        folder_delta = datetime.now() - timedelta(days=(2* args.days))

        for filename in os.listdir(args.target):
            file_path = os.path.join(args.target, filename)

            mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            
            is_file = os.path.isfile(file_path)
            cutoff_time = file_delta if is_file else folder_delta
            if mod_time < cutoff_time: 
                try:
                    if is_purge: 
                        shutil.rmtree(file_path)
                        log_info(f"Purged {filename}{'/*' if not is_file else ''}")
                    else: 
                        staged_file_path = os.path.join(args.stage, filename)
                        shutil.move(file_path, staged_file_path)
                        log_info(f"Staged {filename}{'/*' if not is_file else ''}")
                except Exception as e:
                    log_error(f"Failed Staging {filename}{'/*' if not is_file else ''}--{e}")